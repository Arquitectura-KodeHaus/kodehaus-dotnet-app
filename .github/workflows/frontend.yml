name: Frontend CI/CD - GCP

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  AR_REPO: ${{ vars.ARTIFACT_REGISTRY_REPO || 'kodehaus-frontend-' }}
  SERVICE: kodehaus-frontend-dotnet
  IMAGE_NAME: kodehaus-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        shell: bash
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Auth to GCP (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        working-directory: .

      - name: Create Dockerfile if not exists
        run: |
          if [ ! -f Dockerfile ]; then
            cat > Dockerfile << 'EOF'
          # Build stage
          FROM node:18-alpine AS builder
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci
          COPY . .
          ARG BACKEND_URL
          # Crear el directorio si no existe
          RUN mkdir -p src/environments
          RUN echo "export const environment = { production: true, apiUrl: '${BACKEND_URL}' };" > src/environments/environment.prod.ts
          RUN npm run build

          # Production stage
          FROM nginx:alpine
          COPY --from=builder /app/dist/my-web-app /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 8080
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          fi

      - name: Create nginx.conf if not exists
        run: |
          if [ ! -f nginx.conf ]; then
            cat > nginx.conf << 'EOF'
          server {
              listen 8080;
              server_name _;
              root /usr/share/nginx/html;
              index index.html;

              # Health check endpoint
              location /health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }

              location / {
                  try_files $uri $uri/ /index.html;
              }

              # Cache static assets
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }

              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
          }
          EOF
          fi

      - name: Build & Push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
          BACKEND_URL: ${{ vars.BACKEND_URL_DOTNET }}
        run: |
          IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          
          echo "üî® Building Angular frontend with BACKEND_URL: ${BACKEND_URL}"
          
          docker build \
            --build-arg BACKEND_URL="${BACKEND_URL}" \
            --tag "${IMAGE_URI}" \
            --tag "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:latest" \
            .
          
          echo "üì¶ Pushing image..."
          docker push "${IMAGE_URI}"
          docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:latest"
          
          DIGEST=$(gcloud artifacts docker images describe "${IMAGE_URI}" --format='value(image_summary.digest)')
          echo "IMAGE_URI_DIGEST=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}@${DIGEST}" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        working-directory: .
        run: |
          gcloud run deploy "${{ env.SERVICE }}" \
            --region "${{ env.REGION }}" \
            --image "${IMAGE_URI_DIGEST}" \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 256Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 5 \
            --timeout 10 \
            --concurrency 80 \
            --cpu-boost \
            --labels "app=kodehaus-frontend,env=production,tier=frontend"

      - name: Verify deployment
        working-directory: .
        run: |
          SERVICE_URL=$(gcloud run services describe "${{ env.SERVICE }}" \
            --region "${{ env.REGION }}" \
            --format='value(status.url)')
          
          echo "üåê Service URL: ${SERVICE_URL}"
          
          sleep 10
          
          # Health check
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${SERVICE_URL}/health")
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed (HTTP ${HTTP_CODE})"
            exit 1
          fi
          
          # Verificar index.html
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${SERVICE_URL}/")
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "‚úÖ Frontend is serving!"
          else
            echo "‚ùå Frontend not responding (HTTP ${HTTP_CODE})"
            exit 1
          fi

      - name: Display deployment info
        working-directory: .
        run: |
          SERVICE_URL=$(gcloud run services describe "${{ env.SERVICE }}" \
            --region "${{ env.REGION }}" \
            --format='value(status.url)')
          
          echo ""
          echo "üéâ =================================="
          echo "   Frontend Deployed Successfully!"
          echo "   =================================="
          echo ""
          echo "üåê Frontend URL: ${SERVICE_URL}"
          echo "üîó Backend URL: ${{ vars.BACKEND_URL_DOTNET }}"
          echo "üì¶ Image: ${IMAGE_URI_DIGEST}"
          echo ""
